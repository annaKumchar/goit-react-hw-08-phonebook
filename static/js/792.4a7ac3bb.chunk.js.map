{"version":3,"file":"static/js/792.4a7ac3bb.chunk.js","mappings":"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","sources":["components/Form/ContactsForm.styled.jsx","../node_modules/nanoid/index.browser.js","components/Form/ContactsForm.jsx","components/Section/Section.styled.jsx","components/Section/Section.jsx","components/List/List.styled.jsx","../node_modules/reselect/es/defaultMemoize.js","../node_modules/reselect/es/index.js","redux/selector.js","components/List/List.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","pages/Contacts.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const FormEl = styled.form`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  gap: 20px;\n`;\n\nexport const FormLabel = styled.label`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  gap: 10px;\n  font-size: 16px;\n  font-weight: 400;\n  text-transform: uppercase;\n`;\n\nexport const InputEl = styled.input`\n  border-radius: 4px;\n  border: 2px solid rgb(189, 185, 185);\n  height: 30px;\n  margin-left: 20px;\n  background-color: transparent;\n  flex-grow: 1;\n`;\n\nexport const ButtonEl = styled.button`\n  width: 100px;\n  padding: 10px;\n  background-color: rgb(255, 219, 99);\n  border: none;\n  border-radius: 8px;\n  box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.25);\n  margin-bottom: 20px;\n`;\n","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","import { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { FormEl, FormLabel, InputEl, ButtonEl } from './ContactsForm.styled';\nimport { nanoid } from 'nanoid';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { addContact } from 'redux/operations';\n\nexport function Form() {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const contacts = useSelector(state => state.contacts.contacts);\n  const dispatch = useDispatch();\n\n  let NameId = nanoid();\n  let NumberId = nanoid();\n\n  const handleChange = e => {\n    const { name, value } = e.currentTarget;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const addContactToList = (name, number) => {\n    if (contactIsNotInList(name)) {\n      const action = addContact({ id: nanoid(), name, number });\n      // const action = addContact({ id: nanoid(), name, phone: number });\n      dispatch(action);\n      reset();\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    addContactToList(name, number);\n  };\n\n  const contactIsNotInList = name => {\n    if (contacts.some(e => e.name === name)) {\n      alert(`${name} is already in contacts!`);\n      return false;\n    }\n    return true;\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <FormEl onSubmit={handleSubmit}>\n      <FormLabel htmlFor={NameId}>\n        Name\n        <InputEl\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          onChange={handleChange}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        ></InputEl>\n      </FormLabel>\n\n      <FormLabel htmlFor={NumberId}>\n        Number\n        <InputEl\n          type=\"tel\"\n          name=\"number\"\n          value={number}\n          onChange={handleChange}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        ></InputEl>\n      </FormLabel>\n      <ButtonEl>Add contact</ButtonEl>\n    </FormEl>\n  );\n}\n\nForm.propTypes = {\n  name: PropTypes.string,\n  value: PropTypes.string,\n  handleChange: PropTypes.func,\n  handleSubmit: PropTypes.func,\n};\n","import styled from 'styled-components';\n\nexport const PhonebookWrap = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin-top: 50px;\n`;\n\nexport const PhonebookSection = styled.section`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`;\n\nexport const Title = styled.h2`\n  margin-top: 30px 0 30px 0;\n  font-size: 20px;\n  font-weight: 500;\n  text-transform: uppercase;\n  margin-top: 0;\n  text-transform: uppercase;\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { PhonebookSection, Title } from '../Section/Section.styled';\n\nexport const Section = ({ title, children }) => (\n  <PhonebookSection>\n    <Title>{title}</Title>\n    {children}\n  </PhonebookSection>\n);\n\nSection.propTypes = {\n  title: PropTypes.string,\n};\n","import styled from 'styled-components';\n\nexport const ListEl = styled.ul`\n  list-style: none;\n  padding: 0px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  gap: 30px;\n`;\n\nexport const ListItem = styled.li`\n  padding: 10px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n\n  border: 2px solid grey;\n`;\n\nexport const ListButton = styled.button`\n  margin-top: 10px;\n  width: 60px;\n`;\n","// Cache implementation based on Erik Rasmussen's `lru-memoize`:\n// https://github.com/erikras/lru-memoize\nvar NOT_FOUND = 'NOT_FOUND';\n\nfunction createSingletonCache(equals) {\n  var entry;\n  return {\n    get: function get(key) {\n      if (entry && equals(entry.key, key)) {\n        return entry.value;\n      }\n\n      return NOT_FOUND;\n    },\n    put: function put(key, value) {\n      entry = {\n        key: key,\n        value: value\n      };\n    },\n    getEntries: function getEntries() {\n      return entry ? [entry] : [];\n    },\n    clear: function clear() {\n      entry = undefined;\n    }\n  };\n}\n\nfunction createLruCache(maxSize, equals) {\n  var entries = [];\n\n  function get(key) {\n    var cacheIndex = entries.findIndex(function (entry) {\n      return equals(key, entry.key);\n    }); // We found a cached entry\n\n    if (cacheIndex > -1) {\n      var entry = entries[cacheIndex]; // Cached entry not at top of cache, move it to the top\n\n      if (cacheIndex > 0) {\n        entries.splice(cacheIndex, 1);\n        entries.unshift(entry);\n      }\n\n      return entry.value;\n    } // No entry found in cache, return sentinel\n\n\n    return NOT_FOUND;\n  }\n\n  function put(key, value) {\n    if (get(key) === NOT_FOUND) {\n      // TODO Is unshift slow?\n      entries.unshift({\n        key: key,\n        value: value\n      });\n\n      if (entries.length > maxSize) {\n        entries.pop();\n      }\n    }\n  }\n\n  function getEntries() {\n    return entries;\n  }\n\n  function clear() {\n    entries = [];\n  }\n\n  return {\n    get: get,\n    put: put,\n    getEntries: getEntries,\n    clear: clear\n  };\n}\n\nexport var defaultEqualityCheck = function defaultEqualityCheck(a, b) {\n  return a === b;\n};\nexport function createCacheKeyComparator(equalityCheck) {\n  return function areArgumentsShallowlyEqual(prev, next) {\n    if (prev === null || next === null || prev.length !== next.length) {\n      return false;\n    } // Do this in a for loop (and not a `forEach` or an `every`) so we can determine equality as fast as possible.\n\n\n    var length = prev.length;\n\n    for (var i = 0; i < length; i++) {\n      if (!equalityCheck(prev[i], next[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n}\n// defaultMemoize now supports a configurable cache size with LRU behavior,\n// and optional comparison of the result value with existing values\nexport function defaultMemoize(func, equalityCheckOrOptions) {\n  var providedOptions = typeof equalityCheckOrOptions === 'object' ? equalityCheckOrOptions : {\n    equalityCheck: equalityCheckOrOptions\n  };\n  var _providedOptions$equa = providedOptions.equalityCheck,\n      equalityCheck = _providedOptions$equa === void 0 ? defaultEqualityCheck : _providedOptions$equa,\n      _providedOptions$maxS = providedOptions.maxSize,\n      maxSize = _providedOptions$maxS === void 0 ? 1 : _providedOptions$maxS,\n      resultEqualityCheck = providedOptions.resultEqualityCheck;\n  var comparator = createCacheKeyComparator(equalityCheck);\n  var cache = maxSize === 1 ? createSingletonCache(comparator) : createLruCache(maxSize, comparator); // we reference arguments instead of spreading them for performance reasons\n\n  function memoized() {\n    var value = cache.get(arguments);\n\n    if (value === NOT_FOUND) {\n      // @ts-ignore\n      value = func.apply(null, arguments);\n\n      if (resultEqualityCheck) {\n        var entries = cache.getEntries();\n        var matchingEntry = entries.find(function (entry) {\n          return resultEqualityCheck(entry.value, value);\n        });\n\n        if (matchingEntry) {\n          value = matchingEntry.value;\n        }\n      }\n\n      cache.put(arguments, value);\n    }\n\n    return value;\n  }\n\n  memoized.clearCache = function () {\n    return cache.clear();\n  };\n\n  return memoized;\n}","import { defaultMemoize, defaultEqualityCheck } from './defaultMemoize';\nexport { defaultMemoize, defaultEqualityCheck };\n\nfunction getDependencies(funcs) {\n  var dependencies = Array.isArray(funcs[0]) ? funcs[0] : funcs;\n\n  if (!dependencies.every(function (dep) {\n    return typeof dep === 'function';\n  })) {\n    var dependencyTypes = dependencies.map(function (dep) {\n      return typeof dep === 'function' ? \"function \" + (dep.name || 'unnamed') + \"()\" : typeof dep;\n    }).join(', ');\n    throw new Error(\"createSelector expects all input-selectors to be functions, but received the following types: [\" + dependencyTypes + \"]\");\n  }\n\n  return dependencies;\n}\n\nexport function createSelectorCreator(memoize) {\n  for (var _len = arguments.length, memoizeOptionsFromArgs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    memoizeOptionsFromArgs[_key - 1] = arguments[_key];\n  }\n\n  var createSelector = function createSelector() {\n    for (var _len2 = arguments.length, funcs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      funcs[_key2] = arguments[_key2];\n    }\n\n    var _recomputations = 0;\n\n    var _lastResult; // Due to the intricacies of rest params, we can't do an optional arg after `...funcs`.\n    // So, start by declaring the default value here.\n    // (And yes, the words 'memoize' and 'options' appear too many times in this next sequence.)\n\n\n    var directlyPassedOptions = {\n      memoizeOptions: undefined\n    }; // Normally, the result func or \"output selector\" is the last arg\n\n    var resultFunc = funcs.pop(); // If the result func is actually an _object_, assume it's our options object\n\n    if (typeof resultFunc === 'object') {\n      directlyPassedOptions = resultFunc; // and pop the real result func off\n\n      resultFunc = funcs.pop();\n    }\n\n    if (typeof resultFunc !== 'function') {\n      throw new Error(\"createSelector expects an output function after the inputs, but received: [\" + typeof resultFunc + \"]\");\n    } // Determine which set of options we're using. Prefer options passed directly,\n    // but fall back to options given to createSelectorCreator.\n\n\n    var _directlyPassedOption = directlyPassedOptions,\n        _directlyPassedOption2 = _directlyPassedOption.memoizeOptions,\n        memoizeOptions = _directlyPassedOption2 === void 0 ? memoizeOptionsFromArgs : _directlyPassedOption2; // Simplifying assumption: it's unlikely that the first options arg of the provided memoizer\n    // is an array. In most libs I've looked at, it's an equality function or options object.\n    // Based on that, if `memoizeOptions` _is_ an array, we assume it's a full\n    // user-provided array of options. Otherwise, it must be just the _first_ arg, and so\n    // we wrap it in an array so we can apply it.\n\n    var finalMemoizeOptions = Array.isArray(memoizeOptions) ? memoizeOptions : [memoizeOptions];\n    var dependencies = getDependencies(funcs);\n    var memoizedResultFunc = memoize.apply(void 0, [function recomputationWrapper() {\n      _recomputations++; // apply arguments instead of spreading for performance.\n\n      return resultFunc.apply(null, arguments);\n    }].concat(finalMemoizeOptions)); // If a selector is called with the exact same arguments we don't need to traverse our dependencies again.\n\n    var selector = memoize(function dependenciesChecker() {\n      var params = [];\n      var length = dependencies.length;\n\n      for (var i = 0; i < length; i++) {\n        // apply arguments instead of spreading and mutate a local list of params for performance.\n        // @ts-ignore\n        params.push(dependencies[i].apply(null, arguments));\n      } // apply arguments instead of spreading for performance.\n\n\n      _lastResult = memoizedResultFunc.apply(null, params);\n      return _lastResult;\n    });\n    Object.assign(selector, {\n      resultFunc: resultFunc,\n      memoizedResultFunc: memoizedResultFunc,\n      dependencies: dependencies,\n      lastResult: function lastResult() {\n        return _lastResult;\n      },\n      recomputations: function recomputations() {\n        return _recomputations;\n      },\n      resetRecomputations: function resetRecomputations() {\n        return _recomputations = 0;\n      }\n    });\n    return selector;\n  }; // @ts-ignore\n\n\n  return createSelector;\n}\nexport var createSelector = /* #__PURE__ */createSelectorCreator(defaultMemoize);\n// Manual definition of state and output arguments\nexport var createStructuredSelector = function createStructuredSelector(selectors, selectorCreator) {\n  if (selectorCreator === void 0) {\n    selectorCreator = createSelector;\n  }\n\n  if (typeof selectors !== 'object') {\n    throw new Error('createStructuredSelector expects first argument to be an object ' + (\"where each property is a selector, instead received a \" + typeof selectors));\n  }\n\n  var objectKeys = Object.keys(selectors);\n  var resultSelector = selectorCreator( // @ts-ignore\n  objectKeys.map(function (key) {\n    return selectors[key];\n  }), function () {\n    for (var _len3 = arguments.length, values = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      values[_key3] = arguments[_key3];\n    }\n\n    return values.reduce(function (composition, value, index) {\n      composition[objectKeys[index]] = value;\n      return composition;\n    }, {});\n  });\n  return resultSelector;\n};","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.contacts;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectFilter = state => state.filter;\n\nexport const selectVizibleContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(({ name }) => name.toLowerCase().includes(filter));\n  }\n);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { ListEl, ListItem, ListButton } from './List.styled';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/operations';\nimport { selectVizibleContacts } from 'redux/selector';\n\nexport const List = () => {\n  const dispatch = useDispatch();\n\n  const vizibleContacts = useSelector(selectVizibleContacts);\n  return (\n    <ListEl>\n      {vizibleContacts.map((contact, id) => (\n        <ListItem key={id}>\n          {contact.name}: {contact.number}\n          <ListButton\n            type=\"button\"\n            onClick={() => dispatch(deleteContact(contact.id))}\n          >\n            Delete\n          </ListButton>\n        </ListItem>\n      ))}\n    </ListEl>\n  );\n};\n\nList.propTypes = {\n  contacts: PropTypes.array,\n  deleteContact: PropTypes.func,\n};\n","import styled from 'styled-components';\n\nexport const FilterLabel = styled.label`\nmargin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  text-transform: uppercase;\n  width: 210px;\n`;\n\nexport const FilterInput = styled.input`\n  margin-top: 10px;\n  width: 100%;\n`;\n","import { useSelector, useDispatch } from 'react-redux';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { setFilter } from 'redux/filterSlice';\n\nimport { FilterLabel, FilterInput } from './Filter.styled';\n\nexport const Filter = () => {\n  const value = useSelector(state => state.filter);\n  const dispatch = useDispatch();\n\n  const onChange = event => {\n    const { value } = event.target;\n    dispatch(setFilter(value));\n  };\n\n  return (\n    <FilterLabel>\n      Find contacts by name\n      <FilterInput value={value} onChange={onChange}></FilterInput>\n    </FilterLabel>\n  );\n};\n\nFilter.propTypes = {\n  value: PropTypes.string,\n  onChange: PropTypes.func,\n};\n","import { Form } from 'components/Form/ContactsForm';\nimport { Section } from 'components/Section/Section';\nimport { PhonebookWrap } from 'components/Section/Section.styled';\nimport { List } from 'components/List/List';\nimport { Filter } from 'components/Filter/Filter';\n\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from 'redux/operations';\nimport { selectContacts, selectIsLoading, selectError } from 'redux/selector';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  const contacts = useSelector(selectContacts);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <div>\n      <PhonebookWrap>\n        <Section title=\"Phonebook\">\n          <Form></Form>\n        </Section>\n        {isLoading && <p>Loading contacts...</p>}\n        {error && <p>{error}</p>}\n        {contacts.length > 0 && !isLoading && (\n          <Section title=\"Contacts\">\n            <Filter />\n            <List></List>\n          </Section>\n        )}\n      </PhonebookWrap>\n    </div>\n  );\n}\n"],"names":["FormEl","styled","FormLabel","InputEl","ButtonEl","nanoid","size","id","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","Form","useState","name","setName","number","setNumber","contacts","useSelector","state","dispatch","useDispatch","NameId","NumberId","handleChange","e","currentTarget","value","contactIsNotInList","some","alert","reset","onSubmit","preventDefault","action","addContact","addContactToList","htmlFor","type","onChange","pattern","title","required","PhonebookWrap","PhonebookSection","Title","Section","children","ListEl","ListItem","ListButton","NOT_FOUND","defaultEqualityCheck","a","b","defaultMemoize","func","equalityCheckOrOptions","providedOptions","equalityCheck","_providedOptions$equa","_providedOptions$maxS","maxSize","resultEqualityCheck","comparator","prev","next","length","i","createCacheKeyComparator","cache","equals","entry","get","key","put","getEntries","clear","undefined","createSingletonCache","entries","cacheIndex","findIndex","splice","unshift","pop","createLruCache","memoized","arguments","apply","matchingEntry","find","clearCache","getDependencies","funcs","dependencies","Array","isArray","every","dep","dependencyTypes","map","join","Error","createSelectorCreator","memoize","_len","memoizeOptionsFromArgs","_key","createSelector","_len2","_key2","_lastResult","_recomputations","directlyPassedOptions","memoizeOptions","resultFunc","_directlyPassedOption","_directlyPassedOption2","finalMemoizeOptions","memoizedResultFunc","concat","selector","params","push","Object","assign","lastResult","recomputations","resetRecomputations","selectContacts","selectIsLoading","isLoading","selectError","error","selectVizibleContacts","filter","toLowerCase","includes","List","vizibleContacts","contact","onClick","deleteContact","FilterLabel","FilterInput","Filter","event","target","setFilter","Contacts","useEffect","fetchContacts"],"sourceRoot":""}